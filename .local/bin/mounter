#!/usr/bin/sh

# "Easily mount encrypted devices using PasswordStore"

help() {
  cat <<EOF
External Driver Mounter

Usage:
  mounter COMMAND
  mounter add

Commands:
  add          Creates a directory in /mnt/"
  close        Closes luks device and umount it"
  iopen        Open luks device and mount it using prompted password"
  open         Open luks device and mount it using pass"
EOF
}

adddrive() {
  echo "Existing drives:"
  ls /mnt/
  printf "Name your drive: "
  read -r drivename
  if [ ! -d "/mnt/$drivename" ]; then
    sudo mkdir "/mnt/$drivename"
    sudo chown "$USER:$USER" "/mnt/$drivename"
    echo "Directory /mnt/$drivename created."
    sleep 1
    exit 0
  elif [ -d "/mnt/$drivename" ]; then
    echo "Drive already exists!"
    sleep 1
    exit 1
  fi
}

mounter() {
  device=$(ls /dev | grep -E "sd[a-z]+[0-9]+$" | fzf --prompt "Choose a drive to mount: ")
  drive=$(ls /mnt/ | fzf --prompt "Previously mounted devices: ")
  passdir="${PASSWORD_STORE_DIR:-$HOME/.password-store}"
  pass="$(ls "$passdir/dev/" | awk -F. '{print $1}' | grep "$drive")"
  if [ "$pass" == "$drive" ]; then
    password=$(pass "dev/$pass")
  else
    echo "$drive isn't in your pass store!"
    sleep 1
    exit 1
  fi
  echo "$password" | sudo cryptsetup luksOpen "/dev/$device" "$drive" && echo "$device has been opened and named as $drive!"
  sudo mount "/dev/mapper/$drive" "/mnt/$drive/" && echo "$drive has been mounted to /mnt/$drive!"
  echo "" | xclip -sel clip
  sleep 1
  exit 0
}

imount() {
  device=$(ls /dev | grep -E "sd[a-z]+[0-9]+$" | fzf --prompt "Choose a drive to mount: ")
  echo "Previously mounted devices:" && ls /mnt/
  printf "Name the drive: "
  read -r drive
  sudo cryptsetup luksOpen "/dev/$device" "$drive" && echo "$device has been opened and named as $drive!"
  sudo mount "/dev/mapper/$drive" "/mnt/$drive/" && echo "$drive has been mounted to /mnt/$drive!"
  sleep 1
  exit 0
}

unmount() {
  drive=$(ls /dev/mapper/ | fzf --prompt "Choose a drive to umount: ")
  sudo umount "/mnt/$drive/"
  sudo cryptsetup luksClose "$drive" && echo "$drive has been umounted!"
  sleep 1
  exit 0
}

read_option() {
  while true; do
    help
    printf "Choose an option (add/iopen/open/close): "
    read -r option
    if [ "$option" = "open" ]; then
      mounter
    elif [ "$option" = "iopen" ]; then
      imount
    elif [ "$option" = "close" ]; then
      unmount
    elif [ "$option" = "add" ]; then
      adddrive
    else
      exit 0
    fi
  done
}

case $1 in
"help")
  help
  ;;
"open")
  mounter
  ;;
"iopen")
  imount
  ;;
"close")
  unmount
  ;;
"add")
  adddrive
  ;;
*)
  read_option
  ;;
esac
