#!/usr/bin/env bash

trap killJobs SIGINT

killJobs() {
  kill "$(jobs -p)"
  exit 0
}

help() {
  cat <<EOF
A git repository utility

Usage:
  repox FLAG <FLAG_INPUT> COMMAND SUB_DIRECTORY
  repox COMMAND github
  repox COMMAND codeberg

Commands:
  clone               Clone all repos
  fetch               Fetch all repos
  pull                Pull all repos
  status              Check status from all repos

Flags:
  -h, --help           Displays this message and exits
  -p <parallel>        Set parallels to use
  -c <path/to/repox>   Use a specific repox file
EOF
}

_git() {
  repo=$1
  repo_name=$(basename "$repo" .git)
  local_repo="$dev_dir/$repo_name"

  if [ ! -d "$local_repo" ] && [ "$cmd" != "clone" ]; then
    cmd=clone
  elif [ -d "$dev_dir/$repo_name" ] && [ "$cmd" = "clone" ]; then
    return 1
  fi

  if [ "$cmd" = "status" ]; then
    if git -C "$local_repo" "$cmd" --porcelain | grep -q .; then
      echo "Git status of repository: $repo"
      git -C "$local_repo" "$cmd"
    fi
  elif [ "$cmd" = "clone" ]; then
    if ! git -C "$dev_dir" "$cmd" "$repo"; then
      echo "ERROR: An error occured at $repo"
      return 1
    fi
  else
    if ! git -C "$local_repo" "$cmd"; then
      echo "ERROR: An error occured at $repo"
      return 1
    fi
  fi
}

_parallel() {
  parallels=${parallels:-4}

  cat "$repox_file" | while IFS= read -r repo; do
    jobs_running=$(jobs -p | wc -l)

    while [ "$jobs_running" -ge "$parallels" ]; do
      wait -n
      jobs_running=$(jobs -p | wc -l)
    done
    if echo "$repo" | grep "#" &>/dev/null; then
      continue
    fi
    _git "$repo" &
  done

  wait
}

main() {
  cmd=$1
  sub_dir=$2

  if [ -z "$sub_dir" ]; then
    echo "Missing sub directory!"
    exit 1
  fi

  repox_file=${REPOX_FILE:-$HOME/.repox}
  [ ! -f "$repox_file" ] && {
    echo "ERROR: No repox file found"
    exit 1
  }

  if [ -n "$DEV" ]; then
    dev_dir="$DEV/$sub_dir"
  else
    dev_dir="$HOME/dev/$sub_dir"
  fi

  mkdir -p "$dev_dir"

  _parallel

  echo -e "$(tput setaf 82)Repox finished$(tput sgr0)"
}

while getopts ":h-p:c:" opt; do
  case "$opt" in
  h)
    help
    exit 0
    ;;
  -)
    break
    ;;
  c)
    REPOX_FILE="$OPTARG"
    ;;
  p)
    parallels="$OPTARG"
    ;;
  ?)
    echo "ERROR: Invalid option '-$OPTARG'" >&2
    exit 1
    ;;
  esac
done

shift $((OPTIND - 1))

case "$1" in
--help)
  usage
  exit 0
  ;;
fetch)
  main "$@"
  ;;
clone)
  main "$@"
  ;;
pull)
  main "$@"
  ;;
push)
  main "$@"
  ;;
status)
  main "$@"
  ;;
*)
  echo "ERROR: Invalid command"
  exit 1
  ;;
esac
