#!/usr/bin/env bash

function help() {
  cat <<EOF
A git repository utility

Usage:
  repox FLAG <FLAG_INPUT> COMMAND SUB_DIRECTORY
  repox COMMAND github
  repox COMMAND codeberg

Commands:
  clone               Clone all repos
  fetch               Fetch all repos
  pull                Pull all repos
  status              Check status from all repos

Flags:
  -h, --help           Displays this message and exits
  -p <parallel>        Set parallels to use
  -c <path/to/repox>   Use a specific repox file
EOF
}

function _git() {
  local repo repo_name local_repo
  repo=$1
  repo_name=$(basename "$repo" .git)
  local_repo="$dev_dir/$sub_dir/$repo_name"

  if [ ! -d "$local_repo" ] && [ "$cmd" != "clone" ]; then
    cmd=clone
  elif [ -d "$local_repo" ] && [ "$cmd" == "clone" ]; then
    return 1
  fi

  if [ "$cmd" == "status" ]; then
    if git -C "$local_repo" "$cmd" --porcelain | grep -q .; then
      echo "Git status of repository: $repo"
      git -C "$local_repo" "$cmd"
    fi
  elif [ "$cmd" == "clone" ]; then
    if ! git -C "$local_repo" "$cmd" "$repo"; then
      echo "An error occured at $repo"
      return 1
    fi
  else
    if ! git -C "$local_repo" "$cmd"; then
      echo "An error occured at $repo"
      return 1
    fi
  fi
}

function _parallel() {
  local dev_dir repox_file
  dev_dir=$1
  repox_file=$2
  cmd=$3
  parallels=${parallels:-10}

  parallel -j "$parallels" sh "$(realpath "$0")" --parallel "$dev_dir" "$cmd" :::: "$repox_file"
}

function main() {
  local sub_dir cmd repox_file dev_dir

  cmd=$1
  sub_dir=$2

  if [ -z "$sub_dir" ]; then
    echo "Missing sub directory!"
    exit 1
  fi

  repox_file=${REPOX_FILE:-$HOME/.repox}

  if [[ -n "$DEV" ]]; then
    dev_dir="$DEV/$sub_dir"
  else
    dev_dir="$HOME/dev/$sub_dir"
  fi

  mkdir -p "$dev_dir"

  _parallel "$dev_dir" "$repox_file" "$cmd"

  echo -e "\nRepox finished"
}

while getopts ":h-p:c:" opt; do
  case "$opt" in
  h)
    help
    exit 0
    ;;
  -)
    break
    ;;
  c)
    REPOX_FILE="$OPTARG"
    ;;
  p)
    parallels="$OPTARG"
    ;;
  ?)
    echo "Error: Invalid option '-$OPTARG'" >&2
    exit 1
    ;;
  esac
done

shift $((OPTIND - 1))

case "$1" in
--help)
  usage
  exit 0
  ;;
fetch)
  main "$@"
  ;;
clone)
  main "$@"
  ;;
pull)
  main "$@"
  ;;
status)
  main "$@"
  ;;
--parallel)
  # $1 parallel / $2 dev_dir / $3 cmd / $4 repox_file
  dev_dir=$2
  cmd=$3
  _git "$4"
  ;;
*)
  echo "Error: No known command: $1"
  exit 1
  ;;
esac
