#!/bin/env bash

function se() {
  choice="$(find -L ~/.local/bin -mindepth 1 -printf '%P\n' | fzf)"
  [ -f "$HOME/.local/bin/$choice" ] && $EDITOR "$HOME/.local/bin/$choice"
}

# Move to starting Tmux directory
function cds() {
  local session
  session=$(tmux display-message -p '#{session_path}')
  cd "$session" || return
}

# Use https://github.com/chubin/wttr.in
function weather() {
  curl http://wttr.in/"$1"
}

# Use https://github.com/chubin/cheat.sh
function cheat() {
  curl cht.sh/$@
}

# Tmuxp Attacher
function tp() {
  local session select
  session=$(find "$HOME/.config/tmuxp/" -type f -name '*.yaml' -printf '%P\n' | awk -F. '{print $1}')
  select=$(echo "$session" | fzf --tmux "$@")
  if tmux has-session -t "$select"; then
    tmux attach-session -t "$select"
  else
    tmuxp load "$select"
  fi
}

# Repo Fetch
function rf() {
  local repo
  repo=$(fd . $DEV/**/ --type=directory --max-depth 1 --color always | fzf --ansi --preview "onefetch {}" --preview-window up)
  if [[ -n "$repo" ]]; then
    cd "$repo" || return
  else
    echo "No repository selected"
  fi
}

# Ranger Shell Integration - Moves to last directory ranger exits
function ranger_cd() {
  local temp_file
  temp_file="$(mktemp -t "ranger_cd.XXXXXXXXXX")"
  ranger --choosedir="$temp_file" -- "${@:-$PWD}"
  if chosen_dir="$(cat -- "$temp_file")" && [ -n "$chosen_dir" ] && [ "$chosen_dir" != "$PWD" ]; then
    cd -- "$chosen_dir" || return 1
  fi
  rm -f -- "$temp_file" >/dev/null
}

# Change System Volume: changevol 100%
function changevol() {
  local vol
  vol=$1
  pactl set-sink-volume @DEFAULT_SINK@ "$vol"
}

# Guarantee user ownership over mounted drive
function mountd() {
  sudo mount -o uid=$UID,gid="$(id -g)" "/dev/$1" "/mnt/$2"
}

# Specific Rsync
# "Instead of cloning the whole directory, run it only on
# specific directories from the source directory"
function rsync-mirror() {
  dest=$1
  [[ -z "$dest" ]] && {
    echo "Not destination drive selected"
    return 1
  }
  declare -i i
  i=1
  find . -maxdepth 1 -type d | while read -r dir; do
    if [ "$i" -eq 1 ]; then
      i+=1
      continue
    fi
    current_dir=$(echo "$dir" | awk -F '^./' '{print $2}')
    echo "rsync -av --delete $dir/ $dest/$current_dir/"
    rsync -az --delete "$dir/" "$dest/$current_dir/"
    echo "Completed!"
    echo
  done
}

# Fzf Change Directory
function fcd() {
  cd "$(find "$PWD" -maxdepth 10 -type d 2>/dev/null | fzf)" || return 1
}

# Yazi Shell Integration - Moves to last directory yazi exits
function y() {
  local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
  yazi "$@" --cwd-file="$tmp"
  if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
    builtin cd -- "$cwd" || return 1
  fi
  rm -f -- "$tmp" >/dev/null
}
